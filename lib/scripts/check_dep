#!/bin/bash
#  Check cluster dependencies based on spec. file.

Pname=$(basename $0)
chkprg=search_dependencies
resultfile=/tmp/$Pname.$$
Result=0

usage() {
	echo "Usage: $Pname dependency_spec_file"
}

abort() {
	echo "$* - aborting ..."
	exit -2
}

if [ $# -ne 1 ]; then usage; exit -1; fi
depfile=$1

if [ ! -r $depfile ]; then abort "Cannot read spec file: $depfile."; fi

awk 'BEGIN {
Highest_rank = 0
Lowest_rank = 9999999
resultfile = "'$resultfile'"
}
/#/ { next }
(NF != 2) {next}
{
	rank = $2 + 0
	if (rank <= 0) { print "Invalid rank at line " NR ": " $0 }
	else {
		if (clusters [rank] == "") {
			clusters [rank] = $1
#			print "Put " $1 " into clusters @ " rank "."
		} else {
			clusters [rank] = clusters[rank] " " $1
#			print "Appended " $1 " to clusters @ " rank "."
		}
		if (rank > Highest_rank) { Highest_rank = rank }
		if (rank < Lowest_rank) { Lowest_rank = rank }
	}
}

# Check if clusters at rank "higher" depend on clusters at rank "lower".
function check (higher, lower) {
#	print "checking rank " higher " against " lower
	hcount=split(clusters[higher], hdirs, " ")
	lcount=split(clusters[lower], ldirs, " ")
	for (n in hdirs) {
		for (m in ldirs) {
			print "CHECKING " hdirs[n] " (rank " higher ") AGAINST " \
				ldirs[m] " (rank " lower ")."
			result = system("'$chkprg' " hdirs[n] " " ldirs[m])
			if (result != 0 && ! failure) {
				system("echo " result " > " resultfile)
				failure = 1
			}
		}
	}
}

END {
#	print "Highest_rank: " Highest_rank ", Lowest_rank: " Lowest_rank
	if (Highest_rank == 0) exit(0)
	for (i = Lowest_rank; i < Highest_rank; ++i) {
		if (i in clusters) {
			for (j = i + 1; j <= Highest_rank; ++j) {
				if (j in clusters) {
					check(i, j)
				}
			}
		}
	}
}' $depfile

if [ -r $resultfile ]; then Result=$(tail -1 $resultfile); fi
rm -f $resultfile
exit $Result
