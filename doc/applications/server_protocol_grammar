BNF grammar for the protocol between the server and a GUI client


message         -> msgID "\t" msg end_of_message
msg             -> client_req | server_response
client_req      -> session_key "\t" client_req_spec
client_req_spec -> mkt_data_req | ind_data_req | mkt_list_req | ind_list_req |
                     trad_pertyp_req | login_req | change_session_req |
                     logout_req
mk_data_req     -> mkt_symbol "\t" trad_per_type
ind_data_req    -> indID "\t" mkt_symbol "\t" trad_per_type
trad_pertyp_req -> mkt_symbol
login_req       -> { login_spec "\t" ... }
login_spec      -> start_date_spec | end_date_spec
logout_req      -> <null>
start_date_spec -> "start_date" "\t" trad_per_type "\t" date_spec
end_date_spec   -> "end_date" "\t" trad_per_type "\t" date_spec
date_spec       -> date | "0" | "now"
server_response -> srvr_data | error_msg | login_id
error_msg       -> ta_string
mkt_symbol      -> ta_string
srvr_data       -> mkt_data | ind_data | symbol_list | ind_list |
                     trad_per_types
mkt_data        -> { mkt_tuple "\n" ... }
mkt_tuple       -> date "\t" mkt_fields
ind_data        -> { ind_tuple "\n" ... }
ind_tuple       -> date "\t" ta_real
symbol_list     -> { symbol "\n" ... }
ind_list        -> { ind_specifier "\n" ... }
trad_per_types  -> { trad_per_type "\n" ... }
ind_specifier   -> ind_name "\t" indID
mkt_fields      -> { ta_real "\t" ... }+ [ "\t" volume [ "\t" open_interest ] ]
trad_per_type   -> "daily" | "weekly"
indID           -> natural_integer
volume          -> natural_integer
open_interest   -> natural_integer
session_key     -> natural_integer
msgID           -> natural_integer
login_id        -> natural_integer
mkt_list_req    -> <null>
ind_list_req    -> mkt_symbol "\t" trad_per_type
date            -> year "/" month "/" day [ "\t" time ]
time            -> hour ":" minute [ ":" second ]
year            -> digit digit digit digit
month           -> digit digit
day             -> digit digit
hour            -> digit digit
minute          -> digit digit
second          -> digit digit
natural_integer -> +('0'..'9')
ta_real         -> +('0'..'9') '.' *('0'..'9')
digit           -> ('0'..'9')
end_of_message  -> ''
ta_string       -> +(ta_char)
ta_char         -> Any character other than tab or newline



Notes:

All tokens are constructed from a stream of ASCII characters.

Date components must follow the usual rules for dates.

end_of_message is the Control-G (bell) character.

mkt_list_req and ind_list_req are null because the msgID alone gives enough
information with respect to these requests.

msgID is an integer identifying the type of message - for the server,
the types of messages are those containing data in response to a client
request (srvr_data) and those containing error message information
(error_msg).  For the client, the types of messages are:

    - mkt_data_req (request for market data)
    - ind_data_req (request for indicator data)
    - trad_per_type_req (request for list of trading period types valid for
                   the specified market)
    - mkt_list_req (request for a list of the symbols of all markets in the
                   database)
    - ind_list_req (request for a list of all indicators in the database)

A client market data request always includes the symbol for the desired
market and the desired trading period type.  A client indicator data request
always includes the indicator ID, the symbol for the desired market, and the
desired trading period type.

When a client first connects with a server, the server will not send anything
until it receives a request from the client.  Usually this will be a
mkt_list_req, followed by a ind_list_req; but if the client is a new window
(possibly in a new thread) in an existing process, it may already have a copy
of the list of markets and of the list of indicators.
