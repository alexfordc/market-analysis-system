BNF Grammar for the protocol between the data-supplier server and its
client, the MAS server


message         -> msg end_of_message
msg             -> client_req | server_response
client_req      -> request_id "\t" cl_req_body "\n"
server_response -> status_id "\t" srv_resp_body
cl_req_body     -> symbol_list_req | data_req | stock_split_req
data_req        -> date_time_range "\t" data_flags "\t" mkt_symbol
stock_split_req -> TBD
srv_resp_body   -> srvr_data | error_msg
error_msg       -> ta_string
mkt_symbol      -> ta_string
data_flags      -> intraday_flag | <null>
srvr_data       -> mkt_data "\n"
mkt_data        -> { mkt_tuple "\n" ... }
mkt_tuple       -> datetime "," mkt_fields
intraday_flag   -> 'i'
symbol_list     -> { symbol "\n" ... }
mkt_fields      -> { ta_real "," ... }+ [ "," volume [ "," open_interest ] ]
volume          -> ta_real
open_interest   -> ta_real
true_or_false   -> 'T' | 'F'
request_id      -> sym_list_id | data_id
symbol_list_req -> <null>
datetime        -> date [ "," time ]
date            -> year<>month<>day
time            -> hour<>minute [<>second ]
year            -> digit digit digit digit
month           -> digit digit
day             -> digit digit
hour            -> digit digit
minute          -> digit digit
second          -> digit digit
natural_integer -> +('0'..'9')
ta_real         -> +('0'..'9') '.' *('0'..'9')
digit           -> ('0'..'9')
end_of_message  -> <null>
ta_string       -> +(ta_char)
ta_char         -> Any character other than tab or newline
<null>          -> Empty string (0-length contents)
status_id       -> ok_id | error_id
ok_id           -> '101'
error_id        -> '102'
sym_list_id     -> '1'
data_id         -> '2'


Client-Request Definitions:

Expected Responses for (successfully executed) Client-Requests:

Notes:

See shared_protocol_grammar for the definition of date_time_range.

A 'start_date_spec' and 'end_date_spec', as with the server_protocol_grammar,
may be introduced for efficiency - to prevent receiving more data than is
needed.!!!

mkt_data, sent by the data supplier (server) to the client, will always
end with an emtpy line (or, put in another way, two consecutive newlines).
This indicates end of input to the client.  This means that a correct
message sent by the server will never have an empty line except at the end
of the input.

The 'data_flags' construct is currently only used to specify whether the
requested data is intraday or daily (non-intraday) - with the 'intraday_flag'
('i').  However, if the need arises for further boolean specifications, it
can be expanded to consist of a sequence of one-character flags, for which
the "intraday" flag (where the sequence contains an 'i' for intraday or
does not contain an 'i' for daily) would be one member of that sequence.

Notice that the field separator for market tuples is a comma.  (See
'mkt_data'.)

The construct "symbol1<>symbol2" means that there is no white space separating
symbol1 and symbol2.

All tokens are constructed from a stream of ASCII characters.

Date components must follow the usual rules for dates.

end_of_message is an empty string.  This is a placeholder to allow for a
later decision to use a one-character end-of-message indicator.

When a client first connects with a server, the server will not send anything
until it receives a request from the client.  Usually this will be a
[something-or-other request ... !!! fill this in as it becomes concrete].
