#!/bin/ksh
#  Pre-process a pre-groff-formatted document into groff.

Progname=$(basename $0)

usage() {
	echo Usage: $Progname [options] [file ...] >&2
	echo "Options:"
	echo "   -x extension_name    include text marked with 'extension_name'"
	echo "   -l                   format list constructs"
	echo "   -h                   output as html"
	if [ "$1" = "x" ]; then exit 1;fi
}

if [ $# -lt 1 ]
then
	usage x
fi

files=
list=false
null_xname="__0@not_used0@__"
end_title="end_title"

while [ $# -gt 0 ]; do
	case $1 in
		-x) shift; if [ $# -lt 1 ]; then usage x;fi
			xname=$1; shift ;;
		-l*) list=TRUE; shift ;;
		-h*) html=TRUE; shift ;;
		*) files="$files $1"; shift ;;
	esac
done

if [ -z "$xname" ]; then xname="$null_xname";fi
has_title=FALSE
if [ ! -z "$files" ] && grep "%$end_title" $files >/dev/null; then
	has_title=TRUE
fi

awk 'BEGIN {
	TRUE = 1
	FALSE = 0
	FS = ""
	In_extended_section = FALSE
	if ("'$xname'" == "'$null_xname'") Extensions = FALSE
	else Extensions = TRUE
	if ("'$list'" == "TRUE") Dolist = TRUE		# format lists
	if (groff()) printf("%s\n%s\n%s\n", ".SA 0", ".S 11", ".ll 6.4i")
#	if (groff()) printf("%s\n", ".hy 0")		# hyphenation off
	if ("'$has_title'" == "TRUE") {	# Parse the title.
		x = 0
		while (getline) {
			if ($1 ~ /%title/) {
				main_title = $2
			}
			else if ($1 ~ /%'$end_title'/) {
				printheader(main_title, sub_title, x)
				break
			} else {
				sub_title[x + 1] = $0
				++x
			}
		}
	} else {
		if (groff()) print ".de TP\n.."
	}
}

/^$/ { next } # skip blank lines

/^#/ { next } # skip #comment...

html() && /\\fB/ {
system("echo BOLD on line " NR " >&2")
	gsub(/\\fB/, "<B>")
	boldon = TRUE
}

html() && /\\fI/ {
system("echo ITALIC on line " NR " >&2")
	gsub(/\\fI/, "<I>")
	italon = TRUE
}

html() && /\\fP/ {
system("echo font-OFF on line " NR " >&2")
	if (boldon) {
		gsub(/\\fP/, "</B>")
		boldon = FALSE
	} else if (italon) {
		gsub(/\\fP/, "</I>")
		italon = FALSE
	}
}

/^@begin/ {
	In_extended_section = TRUE
	Ignore_extended_section = TRUE
	fields = split($0, a, ":")
	if (fields > 1 && a[2] == "'$xname'") {
		Ignore_extended_section = FALSE
	}
}

/^@end/ {
	In_extended_section = FALSE
}

(In_extended_section) {
	if (Ignore_extended_section) {
		next
	}
}

/^@/ {
	# Lines starting with @ indicate an "extension"
	if (! Extensions) {
		# Skip the line because 'Extensions' are off.
		next
	} else if ($0 !~ "^@'$xname'") {
		# Skip because 'Extensions' are on and $0 does not match 'xname'.
		next
	}
}

/%date/ {
	date = $2
	next
}

/%hdg1/ {
	printhdg1($2)
	date = ""
	next
}

/%br/ {
	if (groff()) print ".br"
	else print "<br>"
	next
}

/%startlist/ {
	if (Dolist) {
		if (groff()) {
			printf(".BL\n")
		} else {
			print "<P>\n<UL>"
		}
		++list_nesting
	}
	next
}

/%listitem/ {
	if (Dolist)
		if (groff()) {
			printf(".LI\n")
		} else {
			print "<LI>"
		}
	next
}

/%endlist/ {
	if (! Dolist) {
		next
	}
	if (list_nesting > 0) {
		if (groff()) {
			printf(".LE\n.P\n")
		} else {
			print "</UL>\n<P>"
		}
		--list_nesting
	} else {
		warncmd = "echo -e \"Warning: %endlist with no corresponding %startlist"
		warncmd = warncmd " (on line " NR ")\" >&2"
		system(warncmd)
	}
}

/%par/ {
	if (groff()) printf(".P\n")
	else print "<P>"
	next
}

(groff() && NR > 20 && ! newTP) {
	newTP = TRUE
	printf(".de TP\n.sp 0.5\n")
	printf(".tl '\''\\fBPage \\\\nP'\'''\''%s'\''\\fP\n", main_title)
	printf(".sp 3\n..\n")
}

/^@'$xname'/ {
	if (Extensions) print $2
	next
}

/^%/ {
	# Unrecognized key word - skip.
	next
}

{		# must be text, so print it
	print
}

function printheader(main, subt, sub_line_count) {
	if (groff()) {
		printf("%s\n%s\n", ".de TP", ".sp 1.25")
		if (main != "") {
			printf(".ce\n\\s+1\\fB%s\\s-1\n", main)
		}
		for (i = 1; i <= sub_line_count; ++i) {
			printf(".ce\n%s\n", subt[i])
		}
		printf("\\fP\n.sp 1.25\n..\n")
	} else {
		if (main == "" && sub_line_count == 0) {
			next
		}
		print "<TITLE>"
		if (main != "") {
			printf("%s -", main)
		}
		for (i = 1; i <= sub_line_count; ++i) {
			printf(" %s", subt[i])
		}
		print "\n</TITLE>"
	}
}

function printhdg1(hdg) {
	if (groff()) {
		printf(".br\n.ne 7\n")
		printf(".P\n\\fB")
		if (DATEFIRST)
		{
			if (date)
				printf("%s, ", date)
			printf("%s\n", hdg)
		}
		else
		{
			printf("%s", hdg)
			if (date)
				printf(", %s", date)
			printf("\n")
		}
		printf("\\fP\n")
	} else {
		printf("<p>\n<h2>\n%s\n</h2>\n", hdg)
	}
}

function html() {
	result = 0
	if ("'$html'" == "TRUE") result = 1
	return result
}

function groff() {
	return ! html()
}
' $files
