#!/bin/bash
#  Pre-process a formatted document into groff or html.

Progname=$(basename $0)

usage() {
	echo Usage: $Progname [options] [file ...] >&2
	echo "Options:"
	echo "   -x extension_name    include text marked with 'extension_name'"
	echo "   -l                   format list constructs"
	echo "   -h                   output as html"
	if [ "$1" = "x" ]; then exit 1;fi
}

if [ $# -lt 1 ]
then
	usage x
fi

files=
libdir=/home/development/jtc/finance/lib/general/awk
html_tools=$libdir/html_tools.awk
format_tools=$libdir/format_doc.awk
list=false
null_xname="__0@not_used0@__"
end_title="end_title"
end_header="endheader"

while [ $# -gt 0 ]; do
	case $1 in
		-x) shift; if [ $# -lt 1 ]; then usage x;fi
			xname=$1; shift ;;
		-l*) list=TRUE; shift ;;
		-h*) html=TRUE; shift ;;
		--h*) usage; exit 0 ;;
		*) files="$files $1"; shift ;;
	esac
done

if [ -z "$xname" ]; then xname="$null_xname";fi

has_title=FALSE
has_header=FALSE
if [ ! -z "$files" ] && grep "%$end_title" $files >/dev/null; then
	has_title=TRUE
fi
if [ ! -z "$files" ] && grep "%$end_header" $files >/dev/null; then
	has_header=TRUE
fi

awk -f $html_tools -f $format_tools --source 'BEGIN {
	TRUE = 1
	FALSE = 0
	FS = ""
	set_constants()
	In_extended_section = FALSE
	if ("'$xname'" == "'$null_xname'") Extensions = FALSE
	else Extensions = TRUE
	if (true_str("'$list'")) Dolist = TRUE		# format lists
	if (groff()) {
		printf("%s\n%s\n%s\n", ".SA 0", ".S 11", ".ll 6.4i")
#		printf("%s\n", ".hy 0")		# hyphenation off
	} else {
		print_html_header_material()
	}
	if (true_str("'$has_title'") || true_str("'$has_header'")) {
		# Parse the title and/or header.
		x = 0
		while (getline) {
			$0 = convert_directive($0)
			if (groff()) { $0 = convert_html_chars($0) }
			if ($1 ~ /^#/) {
				# skip comment
			} else if ($1 ~ /%title/) {
				main_title = $2
			} else if ($1 ~ /%name/) {
				name = $2
			} else if ($1 ~ /%addr1/) {
				addr1 = $2
			} else if ($1 ~ /%addr2/) {
				addr2 = $2
			} else if ($1 ~ /%phone/) {
				phone = $2
			} else if ($1 ~ /%email/) {
				email = $2
			} else if ($1 ~ /%'$end_header'/) {
				print_header(name, addr1, addr2, phone, email)
				if (End_intro) {
					break
				} else {
					# If document has no title, header/title processing is
					# finished.
					if (! true_str("'$has_title'")) break
					else End_intro = TRUE
				}
			} else if ($1 ~ /%'$end_title'/) {
				print_title(main_title, sub_title, x)
				if (End_intro) {
					break
				} else {
					# If document has no header, header/title processing is
					# finished.
					if (! true_str("'$has_header'")) break
					else End_intro = TRUE
				}
			} else {
				sub_title[x + 1] = $0
				++x
			}
		}
	} else {
		if (groff()) print ".de TP\n.."
	}
}

/^$/ { next } # skip blank lines

/^#/ { next } # skip #comment...

groff() && /\\/ {
	# groff will "eat" a single backslash - translate to double ...
	# !!!May need to filter out uses of backslash as escape character -
	# or make sure backslashes are not used as escape characters.
	gsub(/\\/, "&&")
}

/\*\^[a-z][a-z]*/ {
	$0 = convert_directive($0)
}

groff() && /\&#*[0-9a-z][0-9a-z]*;/ {
	$0 = convert_html_chars($0)
}

html() && /\\fB/ {
	gsub(/\\fB/, "<B>")
	boldon = TRUE
}

html() && /\\fI/ {
	gsub(/\\fI/, "<I>")
	italon = TRUE
}

html() && /\\fP/ {
	if (boldon) {
		gsub(/\\fP/, "</B>")
		boldon = FALSE
	} else if (italon) {
		gsub(/\\fP/, "</I>")
		italon = FALSE
	}
}

/^@begin/ {
	In_extended_section = TRUE
	Ignore_extended_section = TRUE
	fields = split($0, a, ":")
	if (fields > 1 && a[2] == "'$xname'") {
		Ignore_extended_section = FALSE
	}
}

/^@end/ {
	In_extended_section = FALSE
}

(In_extended_section) {
	if (Ignore_extended_section) {
		next
	}
}

/^@/ {
	# Lines starting with @ indicate an "extension"
	if (! Extensions) {
		# Skip the line because 'Extensions' are off.
		next
	} else if ($0 !~ "^@'$xname'") {
		# Skip: $0 does not match 'xname'.
		next
	} else {
		# Remove the @"$xname" directive to allow the line to be
		# processed normally.
		sub(/^[^]*/, "")
	}
}

/%date/ {
	date = $2
	next
}

/%hdg1/ {
	if (groff() && $3 == Hide_non_html_heading1) {
		# Source document specified that this level 1 heading should not
		# be displayed for non-html (e.g., groff) documents.
	} else {
		print_heading($2, 1)
	}
	date = ""
	next
}

/%hdg2/ {
	print_heading($2, 2)
	date = ""
	next
}

/%br/ {
	if (groff()) print ".br"
	else print "<br>"
	next
}

/%startlist/ {
	if (Dolist) {
		if (groff()) {
			printf(".BL\n")
		} else {
			print "<P>\n<UL>"
		}
		++list_nesting
	}
	next
}

/%listitem/ {
	if (Dolist)
		if (groff()) {
			printf(".LI\n")
		} else {
			print "<LI>"
		}
	next
}

/%endlist/ {
	if (! Dolist) {
		next
	}
	if (list_nesting > 0) {
		if (groff()) {
			printf(".LE\n.P\n")
		} else {
			print "</UL>\n<P>"
		}
		--list_nesting
	} else {
		warncmd = "echo -e \"Warning: %endlist with no corresponding %startlist"
		warncmd = warncmd " (on line " NR ")\" >&2"
		system(warncmd)
	}
}

/%par/ {
	if (groff()) printf(".P\n")
	else print "<P>"
	next
}

/%start_url/ {
	In_url = TRUE
#print "url started"
	next
}

/%end_url/ {
	In_url = FALSE
#print "url ended"
#print "(Url_label is " Url_label
#print "Url_addr is " Url_addr
#print "Url_suffix is " Url_suffix ")"
	process_url(Url_addr, Url_label, Url_suffix)
	Url_addr = ""; Url_label = ""; Url_suffix = ""
	Show_non_html_url_label = 0
	Show_non_html_url_addr = 0
	Show_non_html_url_suffix = 0
	next
}

(In_url) {
#print "in url - $0: " $0
	if ($1 == "%url_label") {
		Url_label = $2
		if ($3 == Show_non_html_url_specifier) {
			# Source document specified that the label component should
			# be displayed for non-html (e.g., groff) documents.
			Show_non_html_url_label = 1
		}
#print "set Url_label to " Url_label
	}
	else if ($1 == "%url_addr") {
		Url_addr = $2
		if ($3 == Show_non_html_url_specifier) {
			# Source document specified that the address component should
			# be displayed for non-html (e.g., groff) documents.
			Show_non_html_url_addr = 1
		}
#print "set Url_addr to " Url_addr
	}
	else if ($1 == "%url_suffix") {
		Url_suffix = $2
		if ($3 == Show_non_html_url_specifier) {
			# Source document specified that the suffix component should
			# be displayed for non-html (e.g., groff) documents.
			Show_non_html_url_suffix = 1
		}
#print "set Url_suffix to " Url_suffix
	}
}

(groff() && NR > 20 && ! newTP) {
	newTP = TRUE
	printf(".de TP\n.sp 0.5\n")
	printf(".tl '\''\\fBPage \\\\nP'\'''\''%s'\''\\fP\n", main_title)
	printf(".sp 3\n..\n")
}

# Appears to no longer be needed. (See the /^@/ {...} section.)  If so,
# remove it soon.
#/^@'$xname'/ {
#	if (Extensions) print $2
#	next
#}

/^%/ {
	# Unrecognized key word - skip.
	next
}

{		# must be text, so print it
	print
}

# process and output the specified URL components.
function process_url(addr, label, suffix) {
#print "process_url - addr, label, suffix: " addr ", " label ", " suffix
	if (html()) {
		complete_url_string = url(addr, label) suffix
	} else {
		if (Show_non_html_url_label) {
			complete_url_string = label
		}
		if (Show_non_html_url_addr) {
			complete_url_string = complete_url_string "\n(" addr ")"
		}
		if (Show_non_html_url_suffix) {
			complete_url_string = complete_url_string suffix
		}
	}
	if (complete_url_string != "") {
		print complete_url_string
	}
	complete_url_string = ""
}

function print_header(name, addr1, addr2, phone, email) {
	if (groff()) {
		printf("%s\n%s\n", ".de TP", ".sp 1.25")
		printf(".ce\n\\s+1\\fB%s\\fP\\s-1\n", name)
		if (addr1)
			printf(".ce\n%s\n", addr1)
		if (addr2)
			printf(".ce\n%s\n", addr2)
		if (phone)
			printf(".ce\n%s\n", phone)
		if (email)
			printf(".ce\n%s\n", email)
		printf(".sp 1.25\n..\n")
	} else {
		printf("<center>\n<B>%s</center></B>\n", name)
		if (addr1)
			printf("<center>\n%s</center>\n", addr1)
		if (addr2)
			printf("<center>\n%s</center>\n", addr2)
		if (phone)
			printf("<center>\n%s</center>\n", phone)
		if (email)
			printf("<center>\n%s</center>\n", email)
	}
}

function print_title(main, subt, sub_line_count) {
	if (groff()) {
		# Do not print both header and title:
		if (true_str("'$has_header'")) return
		printf("%s\n%s\n", ".de TP", ".sp 1.25")
		if (main != "") {
			printf(".ce\n\\s+1\\fB%s\\s-1\n", main)
		}
		for (i = 1; i <= sub_line_count; ++i) {
			printf(".ce\n%s\n", subt[i])
		}
		printf("\\fP\n.sp 1.25\n..\n")
	} else {
		if (main == "" && sub_line_count == 0) {
			next
		}
		print "<TITLE>"
		if (main != "") {
			printf("%s", main)
		}
		if (subt[1] != "") {
			printf(" -")
			for (i = 1; i <= sub_line_count; ++i) {
				printf(" %s", subt[i])
			}
		}
		print "\n</TITLE>"
	}
}

function print_heading(hdg, level) {
	if (DATEFIRST) {
		hdg_string = ""
		if (date) {
			hdg_string = date ", "
		}
		hdg_string = hdg_string hdg
	} else {
		hdg_string = hdg
		if (date) {
			hdg_string = hdg_string ", " date
		}
	}
	if (groff()) {
		if (level == 1) {
			font = "\\fB"
		} else if (level == 2) {
			font = "\\fI"
		} else {
			warn("Cannot handle level " level " - skipping heading.")
			return
		}
		printf(".br\n.ne 7\n.P\n%s", font)
		print hdg_string
		printf("\\fP\n")
	} else {
		if (level == 1) {
			hlvl = 3
		} else if (level == 2) {
			hlvl = 4
		} else {
			warn("Cannot handle level " level " - skipping heading.")
			return
		}
		printf("<p>\n<h%d>\n%s\n</h%d>\n", hlvl, hdg_string, hlvl)
	}
}

# Print expected html header material so that Microsoft products will
# recognize the output as an html document.
function print_html_header_material() {
	print "<html>\n<head>\n</head>\n<body>"
}

# Print expected html footer material.
function print_html_footer_material() {
	print "</body>\n</html>"
}

function html() {
	result = 0
	if (true_str("'$html'")) result = 1
	return result
}

function url(address, label) {
	return sprintf("<A href=\"%s\">\n%s</A>", address, label)
}

function groff() {
	return ! html()
}

function set_constants() {
	Show_non_html_url_specifier = "show"
	Show_non_html_url_label = 0
	Show_non_html_url_addr = 0
	Show_non_html_url_suffix = 0
	Hide_non_html_heading1 = "hide"
}

# Does 's' match the string "TRUE"?
function true_str(s) {
	return s == "TRUE"
}

function warn(s) {
	system("echo " s)
}

END {
	if (html()) print_html_footer_material()
}
' $files
