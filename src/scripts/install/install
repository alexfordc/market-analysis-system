#!/bin/bash
# Installation script for MAS

Progname=$(basename $0)
config=/tmp/install_config
non_interactive=
libdir=./lib

. $libdir/utilities

usage() {
	echo "Usage: $Progname [--rootdir rootpath]" >&2
}

cleanup() {
	rm -f $config
}

# Clean up child processes left running.
cleanup_after_config_failure() {
	procs=$(ps -t | awk '/python/ { print $1}')
	kill $procs >/dev/null 2>&1
	kill -9 $procs >/dev/null 2>&1
	rm -f "$libdir"/.*persist.lock
}

interactive() {
	[ -z "$non_interactive" ]
	return $?
}

# Usage: missing_dynamic_libraries executable_file
# All dynamic libraries needed by `executable_file' that cannot be found by
# ldd are echoed, separated by a space, on stdout.  Returns 1 on error.
missing_dynamic_libraries() {
if [ $# -lt 1 ]; then
	return 1
else
	libs=$((ldd "$1")|sed -n 's/[	 ]*\(.*\) *=> *not *found/\1/p')
fi
echo $libs
return 0
}

# Usage: set_dir dirname "message"
set_dir() {
	dir=
	defaultdir="$1"
	if [ $# -ne 2 ]; then fault "set_dir: wrong number of arguments"; fi
	while [ -z "$dir" ]; do
		if interactive; then
			echo -e "$2 ("$defaultdir"): \c" >&2
			read dir
			case "$dir" in
				\$PWD*)
					dir="$PWD/$(echo $dir|sed 's/.PWD//')"
				;;
			esac
		fi
		if [ -z "$dir" ]; then
			dir="$defaultdir"
		elif expr "$dir" : "[^/]" >/dev/null 2>&1; then
			echo -e "Entry must start with / - try again: " >&2
			dir=
		fi
		if [ ! -z "$dir" ]; then
			if [ -d "$dir" ]; then
				if interactive; then
					case $(query "Use $dir (y/n/q[uit])? \c") in
						y*|Y*) ;;
						q*|Q*)
							echo -e "Aborting the installation ..." >&2
							exit 0 ;;
						*) dir= ;;
					esac
				fi
			elif [ -e "$dir" ]; then
				if interactive; then
					echo -e "$dir is not a directory - try again: " >&2
					dir=
				else
					fatal "$dir is not a directory."
				fi
			elif interactive; then
				case $(query \
						"$dir does not exist - create it (y/n/q[uit])? \c") in
					y*|Y*) mkdir -p "$dir"
						if [ $? -ne 0 ]; then
							echo -e "Failed to create $dir - try again: " >&2
							dir=
						fi
							;;
					q*|Q*)
						echo -e "Aborting the installation ..." >&2
						exit 0 ;;
					*) dir=
						echo -e "$2 ("$defaultdir"): \c" >&2
					;;
				esac
			else
				if ! mkdir -p "$dir"; then
					fatal "Failed to create $dir."
				fi
			fi
		fi
		if [ ! -z "$dir" ]; then
			[ -w "$dir" -a -x "$dir" ]
			if [ $? -ne 0 ]; then
				if interactive; then
					echo -e "Don't have permission to install in $dir " \
						"- try again: " >&2
					dir=
				else
					fatal "Don't have permission to install in $dir."
				fi
			fi
		fi
	done
	echo "bin:$dir/bin" >>$config
	echo "lib:$dir/lib" >>$config
	echo "doc:$dir/doc" >>$config
}

# Check whether any of the dynamic libraries needed by the mas executable
# are not found by ldd.
check_dynamic_libs() {
	result=0
	echo -e "Using ldd to check for required dynamic libraries ...\c" >&2
	mas="$bindir"/mas
	mlibs=$(missing_dynamic_libraries "$mas")
	if [ ! -z "$mlibs" ]; then
		echo -e "\nThe following library files were not found:" >&2
		echo -e "$mlibs" >&2
		echo -e "You will need to obtain these files and place them in" >&2
		echo -e "/lib, /usr/lib, /usr/local/lib or adjust the environment" >&2
		echo -e "variable LD_LIBRARY_PATH to include the location of" >&2
		echo -e "the files." >&2
		result=1
	else
		echo -e "\nAll needed libraries were found." >&2
	fi
	return $result
}

# Start the server in the background (with "-o -f ,").
# Usage: start_server mas_exec_file_path [extra_options] [datafiles]
start_server() {
	if [ -z "$1" ]; then
		fault "Missing argument for start_server function."
	fi
	cmd=$1; shift
	MAS_DIRECTORY="$libdir" $cmd -o -f , $* >/dev/null 2>&1 &
	serverproc=$!
}

config() {
	>$config
	if [ $# -gt 0 ]; then
		if [ "$1" = "--rootdir" -a ! -z "$2" ]; then
			basedir="$2"
			non_interactive=y
		else
			usage; fatal
		fi
	elif user_is_administrator; then
		basedir=/opt/mas
	else
		basedir="$HOME/mas"
	fi
	if [ $? -ne 0 ]; then fatal "Cannot create configuration file $config"; fi
	echo "NOTE: It is recommended not to use spaces in directory names." >&2
	set_dir $basedir "Enter the directory in which you wish to install MAS" >&2
}

config_cmd() {
	portnumber=$1
	shift
	cmd="$macl $portnumber -i $1"
	shift
	for f;do
		cmd="$cmd && $macl $portnumber -i $f"
	done
	# Command to stop the server:
	stop_cmd="(echo |$macl $portnumber)"
	echo -e "($cmd; $stop_cmd) >/dev/null 2>&1"
}

show_config_information() {
	indfile="$libdir"/indicators_persist
	mkanafile="$libdir"/generators_persist
	echo -e "\nNOTE: If you set your MAS_DIRECTORY environment variable \c" >&2
	echo -e "to some\nother directory than $libdir, you will want\nto \c" >&2
	echo -e "move the configuration files:\n$indfile and $mkanafile\c" >&2
	echo -e "\nto this directory.\n" >&2
}

# Configure MAS indicators, etc.
# (Should be last task, if possible.)
configure_mas() {
	configresult=0
	maximum_allowed_time=120
	export PYTHONPATH="$libdir"/python
	ifile="$libdir"/config/indicators
	mfile="$libdir"/config/market_analyzers
	macl_files="indicators parabolic-sar cci market_analyzers cci_signals"
	macl="$bindir"/macl
	mas="$bindir"/mas
	port=$RANDOM
	config_example="$macl $port -i $ifile && $macl $port -i $mfile"
	if [ -z "$port" ]; then port=23491; elif [ $port -lt 1024 ]; then
		port=$(expr $port + 1024)
	fi
	if interactive; then
		echo -e "\nThe MAS library includes a set of technical indicators " \
			"and market analyzers." >&2
		case $(query \
				"Would you like to have these components added to" \
				"the MAS configuration? (y/n) ") in
			y*|Y*) ;;
			*)
		echo -e "\nIf you wish, you may add these components later by " \
			"starting the server\nand then executing the macl script with " \
			"the configuration files as input." >&2
		echo -e "For example, if the server was started with port $port:\n" \
			"$config_example $port\n" >&2
				return $configresult;;
		esac
	fi
	cd $libdir/config
	rm -f *_persist # Remove old *_persist files, if they exist.
	for f in $macl_files; do
		check_file_exists $f true "Indicator file $f not found."
	done
	check_exe_file $mas true "File $mas not found."
	check_exe_file $macl true "File $macl not found."
	echo "Starting the server to configure indicators." >&2
	start_server $mas -b $port
	sleep 1 # Wait for server to start up.
	echo -e "Configuring - \c" >&2
	config_outfile=/dev/null
	(eval $(config_cmd $port $macl_files)) >$config_outfile 2>&1 &
	configproc=$!
	trap "configresult=1" SIGUSR1
	monitor $maximum_allowed_time -p $configproc -p $serverproc \
		"MAS component configuration" &
	monproc=$!
	wait $configproc
	sleep 5 # Wait for monitor's signal, if the config. took too long.
	if [ $configresult -ne 0 ]; then
		echo -e "\nComponent configuration failed." >&2
		configresult=1
		wait $monproc
		cleanup_after_config_failure
	else
		kill -SIGUSR2 $monproc >/dev/null 2>&1
		echo -e "\nComponent configuration succeeded." >&2
		show_config_information
	fi
	return $configresult
}

trap "handle_signal" SIGINT SIGQUIT SIGABRT SIGBUS SIGILL SIGHUP SIGKILL
config $*

libdir="$(awk 'BEGIN {FS=":"}/lib:/ { print $2}' $config)"
bindir="$(awk 'BEGIN {FS=":"}/bin:/ { print $2}' $config)"
docdir="$(awk 'BEGIN {FS=":"}/doc:/ { print $2}' $config)"

install_files() {
	if [ ! -e "$libdir" ]; then mkdir -p "$libdir"; fi
	if [ $? -ne 0 ]; then
		fatal "$Progname: Failed to create directory $libdir" >&2
	fi

	if [ ! -d "$libdir" -o ! -w "$libdir" ]; then
		fatal "$Progname: Cannot write to target dir $libdir" >&2
	fi

	if [ ! -e "$bindir" ]; then mkdir -p "$bindir"; fi
	if [ $? -ne 0 ]; then
		fatal "$Progname: Failed to create directory $bindir" >&2
	fi

	if [ ! -d "$bindir" -o ! -w "$bindir" ]; then
		fatal "$Progname: Cannot write to target dir $bindir" >&2
	fi

	install_result=0
	if [ -d "$basedir" ]; then cp -f forum.txt "$basedir"; fi
	cp -f bin/* "$bindir"
	binresult=$?
	if [ "$binresult" -eq 0 ]; then
		(cd lib; find . -type f -print | cpio -pdmv "$libdir")
		libresult=$?
		if [ "$libresult" -eq 0 ]; then
			(cd doc; find . -type f -print | cpio -pdmv "$docdir")
			docresult=$?
		fi
	fi
	if [ "$binresult" -ne 0 ]; then
		echo "Error encountered installing executable files." >&2
		install_result=$binresult
	elif [ "$libresult" -ne 0 ]; then
		echo "Error encountered installing library files." >&2
		install_result=$libresult
	elif [ "$docresult" -ne 0 ]; then
		echo "Error encountered installing documentation files." >&2
		install_result=$docresult
	fi
	return $install_result
}

install_files
result=$?
if [ "$result" -eq 0 ]; then
	echo -e "Installation of MAS executable and library files succeeded.\n" >&2
	if check_dynamic_libs; then
		configure_mas
		result=$?
	else
		echo -e "After installing the needed libraries, you can run this" >&2
		echo -e "script again to configure MAS." >&2
		result=1
	fi
fi
if [ "$result" -eq 0 ]; then
	echo -e "Installation complete." >&2
fi

cleanup
exit $result
