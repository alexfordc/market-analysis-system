#!/usr/bin/env python
# Market Analysis Command-Line (MACL) client - accesses the MA server
# command-line interface via a socket connection.

from sys import *
from ma_connection import *
from CommandProcessor import *
import os

Buffersize = 1
Exit_string = 'x\n'
Record = false
Recordfile = 'mas_session'

def usage():
	print "Usage: " + argv[0] + " [options] port_number" + "\nOptions:\n" + \
		"   -h <hostname>   Connect to server on host <hostname>\n" +\
		"   -r <file>       Record user input and save to <file>\n" +\
		"   -i <file>       Obtain input from <file> instead of the console\n"

def abort(msg):
	if msg != None:
		print msg + " - ",
	print "Exiting ..."
	if connection != 0:
		connection.send_message(Exit_string)
		connection.receive_message()
		print "Closing ..."
		connection.close()
	exit(-1)

# Obtain user response, skipping comments (# ...)
def user_response():
	loop = true
	while loop:
		s = stdin.readline()[:-1]
		if len(s) > 0 and s[0] != '#':
			loop = false
	return s

if len(argv) < 2:
	usage()
	exit(-1)

connection = 0
host = ""
port = -1
argcount = len(argv)
i = 1
while i < argcount:
	if argv[i][:2] == '-h':
		if i + 1 < argcount:
			i = i + 1
			host = argv[i]
		else:
			usage(); exit(-1)
	elif argv[i][:2] == '-r':
		Record = true
		if i + 1 < argcount and argv[i+1][:1] != '-':
			i = i + 1
			Recordfile = argv[i]
		else:
			abort("Output file for record option was not specified.")
	elif argv[i][:2] == '-i':
		if i + 1 < argcount and argv[i+1][:1] != '-':
			i = i + 1
			try:
				input_file = open(argv[i], 'r', 000)
			except:
				abort("Attempt to open input file " + argv[i] + " failed")
			stdin = input_file
		else:
			abort("Output file for record option was not specified.")
	else:
		try:
			port = eval(argv[i])
		except:
			usage(); exit(-1)
	i = i + 1

if port == -1:
	usage()
	abort("Missing port number")
if host == "":
	f = os.popen("hostname")
	host = f.readline()[:-1]

if host == "":
	print argv[0] + ": No host found."
	usage(); exit(-1)

processor = CommandProcessor(Record)
connection = Connection(host, port)
connection.receive_message()
while not connection.termination_requested:
	print connection.last_message,
	processor.set_server_msg(connection.last_message)
	if processor.error:
		if processor.fatal_error:
			abort("Invalid user input")
	processor.process(user_response())
	connection.send_message(processor.result)
	connection.receive_message()
connection.close()
if processor.record:
	print "Saving recorded input to file " + Recordfile + "."
	record_file = open(Recordfile, 'w', 644)
	record_file.write(processor.input_record)
	record_file.close()
