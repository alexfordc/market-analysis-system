#!/bin/bash
# Test a new release to see if it compiles, passes all tests, etc.

wkdir=/tmp/work$$
finoutfile=/tmp/finalize.out$$
masdir=$wkdir/testdir
keep_src=false
Progname=$(basename $0)
testcount=0
passed_tests=0

usage() {
	echo "Usage: $Progname release_number [-k[eep_source]]"
}

# Print fatal error message and exit
fatal() {
	echo -e "Fatal error\c"
	if [ $# -gt 0 ]; then echo "$*."; else echo "."; fi
	exit -1
}

# Fail a test.
fail() {
	echo -e "Test failed\c"
	if [ $# -gt 0 ]; then echo ": $*."; else echo "."; fi
}

query() {
	echo -e "$*\c" >&2
	read answer
	echo $answer
}

cleanup() {
	if [ "$keep_src" = true ]; then
		echo "Leaving source code in directory: $wkdir"
	else
		rm -rf $wkdir
	fi
}

handle_signal() {
	case $(query "\nCaught signal - terminate program? (y/n) \c") in
		y*|Y*) echo "Exiting ..." >&2; cleanup; exit 0 ;;
		*) echo "Continuing ..." >&2 ;;
	esac
}

random_port() {
	x=$RANDOM
	if [ $x -lt 1024 ]; then x=$(expr $x + 1024); fi
	echo $x
}

# Increment passed test count.
incr_passed_tests() {
	passed_tests="$(expr $passed_tests + 1)"
}

# Report test statistics.
report() {
	echo "$passed_tests tests passed out of a total of $testcount tests."
}

# Test the binary release of the server and client
test_binaries() {
	testcount="$(expr $testcount + 1)"
	(
	sbintarfile=$release_dir/mas_linux${release_number}.tar.gz
	echo -e "Testing server binary release ..\c"
	tar zxf $sbintarfile || {
		fail "Failed to untar $sbintarfile"; return 1
	}
	echo -e "..\c"
	mkdir -p $masdir/bin $masdir/lib $masdir/doc
	cd *${release_number} >/dev/null || {
		fail "Failed to cd to mas directory"; return 1
	}
	echo "$masdir/bin
y
$masdir/lib
y
$masdir/doc
y
y"| ./install >/dev/null 2>&1 || {
		fail "Installation failed"; return 1
	}
	echo -e ".."
	cd $masdir/lib || {
		fail "Failed to cd to lib directory"; return 1
	}
	export MAS_DIRECTORY=$PWD
	export PYTHONPATH=$masdir/lib/python
	echo -e "Running server using data files."
	p=$(random_port)
	($masdir/bin/mas -o -f , -b $p data/*txt >/dev/null &
	sleep 6; $masdir/bin/magc $p && sleep 2 &&
	echo  | $masdir/bin/macl >/dev/null $p) || {
		fail; return 1
	}
	echo -e "Running server using database."
	p=$(expr $p + 1)
	($masdir/bin/mas -o -f , -b $p -p >/dev/null &
	sleep 6; $masdir/bin/magc $p && sleep 2 &&
	echo  | $masdir/bin/macl >/dev/null $p) || {
		fail; return 1
	}
	echo "Test of binary release passed."
	)
}

finalize() {
	rm -f $finoutfile
	for i in 1 2; do
		# Loop twice, in case it core dumps the first time.
		echo "Finalization - try $i ..."
		if echo y|es4 -finalize $1 -ace Ace.ace >>$finoutfile 2>&1; then
			result=0
			echo "Finalization (try $i) with es4 succeeded."
			break
		else
			echo "Finalization (try $i) with es4 failed - output saved" \
				"to $finoutfile."
			rm -f core
			result=1
		fi
	done
	return $result
}

freeze() {
	(
	cd EIFGEN/F_code >/dev/null
	finish_freezing >/dev/null 2>&1
	return $?
	)
}

run_server_tests() {
	cd test >/dev/null
	./run_tests>$wkdir/mastestresults.$$
	result=$?
	egrep 'out of .*tests succeeded' $wkdir/mastestresults.$$
	return $result
}

# Test the server source code release
test_server_source() {
	testcount="$(expr $testcount + 1)"
	(
	rm -rf $wkdir/*${release_number}/src
	srctarfile=$release_dir/serversrc${release_number}.tar.gz
	echo -e "Testing server source release .."
	tar zxf $srctarfile || {
		fail "Failed to untar $srctarfile"; return 1
	}
	cd *${release_number}/src/server1 >/dev/null || {
		fail "Failed to cd to source directory"; return 1
	}
	echo -e "Compiling Eiffel source code."
	export MAS=$PWD/../..
	finalize || {
		fail "Eiffel finalization failed"; return 1
	}
	echo -e "Freezing results."
	freeze || {
		fail "Eiffel freezing failed"; return 1
	}
	echo -e "Running server tests."
	run_server_tests || {
		fail "Server tests failed"; return 1
	}
	echo "Test of server source release passed."
	)
}

# Test the client source code release
test_client_source() {
	testcount="$(expr $testcount + 1)"
	(
	rm -rf $wkdir/*
	echo -e "Testing client source release ..\c"
	sbintarfile=$release_dir/mas_linux${release_number}.tar.gz
	tar zxf $sbintarfile || {
		fail "Failed to untar $sbintarfile"; return 1
	}
	clsrctarfile=$release_dir/clientsrc${release_number}.tar.gz
	tar zxf $clsrctarfile || {
		fail "Failed to untar $clsrctarfile"; return 1
	}
	echo -e "..\c"
	cd *${release_number}/src/clients/GUI1 >/dev/null || {
		fail "Failed to cd to client source directory"; return 1
	}
	javac MA_Client.java >/dev/null 2>&1 || {
		fail "Failed to compile client source code"; return 1
	}
	echo -e "..\c"
	mdir="$(ls -d $wkdir/*${release_number})"
	export PYTHONPATH=$mdir/lib/python
	(p=$(random_port)
	$mdir/bin/mas -o -f , -b $p $mdir/lib/data/*txt >/dev/null&
	java MA_Client $(hostname) $p
	echo  | $mdir/bin/macl >/dev/null 2>&1 $p) || {
		fail; return 1
	}
	echo
	echo "Test of client source release passed."
	)
}

if [ $# -lt 1 ]; then usage; exit -1; fi
release_number=$1
release_dir="$(ls -d ~release/*${release_number})"
if [ $? -ne 0 ]; then
	fatal "Cannot find directory for release $release_number"
fi
if [ $# -gt 1 ]; then
	case $2 in
		-k*) keep_src=true ;;
	esac
fi

trap "handle_signal" SIGINT SIGQUIT SIGABRT SIGBUS SIGILL SIGHUP SIGKILL

rm -rf $wkdir
mkdir $wkdir
cd $wkdir
if test_binaries; then
	incr_passed_tests
	if test_server_source; then
		incr_passed_tests
		if test_client_source; then
			incr_passed_tests
		fi
	fi
fi
report
cleanup
