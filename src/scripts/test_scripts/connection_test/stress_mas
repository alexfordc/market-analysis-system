#!/usr/bin/env python
# Script for stress testing the mas server by posing as a GUI client

def abort(msg, conn):
	if msg != None:
		print msg + " - ",
	print "Exiting ..."
	if conn != 0:
		print "Closing ..."
		conn.close()
	exit(-1)

try:
	lastmodule = "sys"; from sys import *
	lastmodule = "time"; from time import *
	lastmodule = "stress_connection"; from stress_connection import *
	lastmodule = "os"; import os
except:
	abort("Failed to import library module " + lastmodule + ".\nHas " + \
		"PYTHONPATH been set to include the MAS lib/python directory?", 0)

def usage():
	print "Usage: " + argv[0] + " [options] port_number" + "\nOptions:\n" + \
		"   -h <hostname>   Connect to server on host <hostname>\n" +\
		"   -i <file>       Obtain input from <file> instead of the " +\
							"console\n" +\
		"   -t <time>       Sleep for 'time' seconds within each loop " +\
							"iteration\n" +\
		"   -s              Silent mode - don't echo data from server\n"

# Obtain user response, skipping comments (# ...)
def user_response():
	loop = true
	while loop:
		s = stdin.readline()[:-1]
		if len(s) > 0 and s[0] != '#':
			loop = false
	return s

if len(argv) < 2:
	usage()
	exit(-1)

sleeptime = 0.35
silent = false
host = ""
port = -1
argcount = len(argv)
i = 1
while i < argcount:
	if argv[i][:2] == '-h':
		if i + 1 < argcount:
			i = i + 1
			host = argv[i]
		else:
			usage(); exit(-1)
	elif argv[i][:2] == '-s':
		silent = true
	elif argv[i][:2] == '-i':
		if i + 1 < argcount and argv[i+1][:1] != '-':
			i = i + 1
			try:
				input_file = open(argv[i], 'r', 000)
			except:
				abort("Attempt to open input file " + argv[i] + " failed", 0)
			stdin = input_file
		else:
			abort("Output file for record option was not specified.", 0)
	elif argv[i][:2] == '-t':
		if i + 1 < argcount and argv[i+1][:1] != '-':
			i = i + 1
			try:
				sleeptime = eval(argv[i])
			except:
				abort("Invalid sleep time", 0)
			stdin = input_file
		else:
			abort("Sleep time was not specified.", 0)
	else:
		try:
			port = eval(argv[i])
		except:
			usage(); exit(-1)
	i = i + 1

if port == -1:
	usage()
	abort("Missing port number", 0)
if host == "":
	host = "localhost";

loop = 0
while 1:
	# Primitive - only loops with the last input read after the "loop"
	# directive.
	if not loop:
		s = user_response()
	else: sleep(sleeptime)
	if s == "" or s == "<end>":
		connection.close()
		break
	if s == "loop":
		loop = 1
		s = user_response()
	if not silent: print "SENDING" + s
	else: print ".",; stdout.flush()
	connection = Connection(host, port)
	connection.send_message(s)
	connection.receive_message()
	if not silent: print connection.last_message,
	connection.close()
